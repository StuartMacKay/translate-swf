/*
 * Interpreter.java
 * Translate
 *
 * Copyright (c) 2003-2010 Flagstone Software Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *  * Neither the name of Flagstone Software Ltd. nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.flagstone.translate.tools;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

import com.flagstone.translate.ASCompiler;
import com.flagstone.translate.ASNode;
import com.flagstone.translate.ParseException;

/**
 * Interpreter.java - provides a simple command-line interpreter that allows the
 * grammar to be tested and sample swf files to be generated.
 *
 * Synopsis:
 *
 * java -classpath &gt;classpath&gt; Interpreter
 *     [ --file filename ]
 *     [ --dump ]
 *     [ --encode filename ]
 *
 * where
 *
 *   &lt;classpath&gt; is the path where the parser jar is located.
 *
 *   --file filename   is a text file containing ActionScript statements.
 *
 *   --dump            instructs the class to print out a description of the tree
 *                     of ASNodes generated by the parser.
 *
 *   --encode filename is the name of the file where the compiled ActionScript
 *                     will be written.
 *
 * If a file is not specified then the parser will read ActionScript statements
 * from the standard input stream. The parser will continue to read statements
 * typed at the keyboard until the stream is closed by typing ctrl-d.
 */
public final class Interpreter
{
    public static void main (String args[]) {
        new Interpreter(args);
    }

    private final Map<String, String> options;
    private ASNode root;

    /**
     * Constructs a new Interpreter, parsing the array of arguments which defines
     * whether the interpreter should parse a named file or read ActionScript
     * statements from the standard input.
     *
     * The node tree constructed can be dumped to display its structure.
     *
     * @param args an array of strings that specify the options used to control
     * the operation of the interpreter.
     */
    public Interpreter(String[] args)
    {
        options = new LinkedHashMap<String, String>();
        getOptions(args);

        boolean readFile = options.containsKey("file");
        boolean showNodes = options.containsKey("dump");
        boolean encodeFile = options.containsKey("encode");

        ASCompiler compiler = new ASCompiler();

        System.out.println("");

        try
        {
            if (readFile)
            {
                String scriptFile = options.get("file");

                System.out.println("Reading ActionScript from " + scriptFile);

                compiler.compile(scriptFile); // TODO
            }
            else
            {
                System.out.println("Type in ActionScript statements, type Ctrl-D to finish.");

                compiler.compile((String)null); // TODO
            }

            if (showNodes)
            {
                System.out.println("Dumping the contents of the node tree...");

                root.displayTree("");
            }

            if (encodeFile)
            {
                String swfFile = options.get("encode");

                if (root.getType() == ASNode.Array)
                    frameScript(swfFile);
                else if (root.getType() == ASNode.Button)
                    buttonScript(swfFile);
                else if (root.getType() == ASNode.MovieClip)
                    movieClipScript(swfFile);
            }
        }
        catch (ParseException e)
        {
            System.err.println(compiler.getError());
            System.err.println("    File: " + compiler.getFilename() + ", Line: " + compiler.getLineNumber());
            System.err.println("    " + compiler.getLine());
        }
    }

    private void getOptions(String[] args)
    {
        String optionName = null;
        String optionValue = null;

        for (int i=0; i<args.length; i++)
        {
            if (args[i].length() >= 2 && args[i].substring(0, 2).equals("--"))
            {
                optionName = args[i].substring(2);
                optionValue = "";

                if (i+1 < args.length)
                    optionValue = args[i+1];

                options.put(optionName, optionValue);
            }
        }
    }

    /*
     * Generates a sample swf file containing a single frame which executes the
     * compiled actions when displayed.
     */
    private void frameScript(String filename)
    {
        try
        {
            FileOutputStream out = new FileOutputStream(filename);

            byte[] data = new byte[0]; //TODO root.encode(5);

            int fileLength = 35 + data.length + 1;
            int actionLength = data.length + 1;

            /*
             * The signature identifies the file as containing Flash 5.
             */
            int[] signature = { 0x46, 0x57, 0x53, 0x05 };

            for (int i=0; i<signature.length; i++)
                out.write(signature[i]);

            // Write out length of file

            for (int i=0; i<4; i++, fileLength >>>= 8)
                out.write(fileLength);

            /*
             * The rest of the header sets the frame size to 200 x 200
             * pixels, plays at 12 frames per second, contains 1 frame,
             * sets the background colour to be white and writes out
             * the first 2 bytes of the DoAction tag.
             */

            int[] header = {
                0x68, 0x00, 0x1f, 0x40, 0x00, 0x07, 0xd0, 0x00,
                0x00, 0x0c, 0x01, 0x00, 0x43, 0x02, 0xff, 0xff,
                0xff, 0x3f, 0x03
            };

            for (int i=0; i<header.length; i++)
                out.write(header[i]);

            for (int i=0; i<4; i++, actionLength >>>= 8)
                out.write(actionLength);

            out.write(data);
            out.write(0);

            // ShowFrame

            out.write(64);
            out.write(0);

            // End of Movie

            out.write(0);
            out.write(0);
        }
        catch (IOException e)
        {
            System.err.println("Could not write Flash file: ");
        }
    }

    /*
     * Generates a sample swf file containing the compiled actions for a button
     * No button is displayed in the movie however the file may be browsed by
     * a suitable viewer or parsed using Transform to inspect the byte-codes and
     * actions generated when the script is compiled.
     */
    private void buttonScript(String filename)
    {
        try
        {
            FileOutputStream out = new FileOutputStream(filename);

            byte[] data = new byte[0]; //TODO root.encode(5);

            int fileLength = 47 + data.length;
            int actionLength = data.length + 13;

            /*
             * The signature identifies the file as containing Flash 5.
             */
            int[] signature = { 0x46, 0x57, 0x53, 0x05 };

            for (int i=0; i<signature.length; i++)
                out.write(signature[i]);

            // Write out length of file

            for (int i=0; i<4; i++, fileLength >>>= 8)
                out.write(fileLength);

            /*
             * The rest of the header sets the frame size to 200 x 200
             * pixels, plays at 12 frames per second, contains 1 frame,
             * sets the background colour to be white and writes out
             * the first bytes of the DefineButton2 tag.
             */

            int[] header = {
                0x68, 0x00, 0x1f, 0x40, 0x00, 0x07, 0xd0, 0x00,
                0x00, 0x0c, 0x01, 0x00, 0x43, 0x02, 0xff, 0xff,
                0xff, 0xbf, 0x08,

            };

            for (int i=0; i<header.length; i++)
                out.write(header[i]);

            for (int i=0; i<4; i++, actionLength >>>= 8)
                out.write(actionLength);

            int[] body = {
                 0x01, 0x00, 0x00, 0x08, 0x00, 0x01, 0x01, 0x00,
                 0x01, 0x00, 0x00, 0x00, 0x00,
            };

            for (int i=0; i<body.length; i++)
                out.write(body[i]);

            out.write(data);

            // ShowFrame

            out.write(64);
            out.write(0);

            // End of Movie

            out.write(0);
            out.write(0);
        }
        catch (IOException e)
        {
            System.err.println("Could not write Flash file: ");
        }
    }

    /*
     * Generates a sample swf file containing the compiled actions for a movie
     * clip. Nothing is displayed in the movie however the file may be browsed by
     * a suitable viewer or parsed using Transform to inspect the byte-codes and
     * actions generated when the script is compiled.
     */
    private void movieClipScript(String filename)
    {
        try
        {
            FileOutputStream out = new FileOutputStream(filename);

            byte[] data = new byte[0]; //TODO root.encode(5);

            int fileLength = 38 + data.length;
            int actionLength = data.length + 7;

            /*
             * The signature identifies the file as containing Flash 5.
             */
            int[] signature = { 0x46, 0x57, 0x53, 0x05 };

            for (int i=0; i<signature.length; i++)
                out.write(signature[i]);

            // Write out length of file

            for (int i=0; i<4; i++, fileLength >>>= 8)
                out.write(fileLength);

            /*
             * The rest of the header sets the frame size to 200 x 200
             * pixels, plays at 12 frames per second, contains 1 frame,
             * sets the background colour to be white and writes out
             * the first bytes of the PlaceObject2 tag.
             */

            int[] header = {
                0x68, 0x00, 0x1f, 0x40, 0x00, 0x07, 0xd0, 0x00,
                0x00, 0x0c, 0x01, 0x00, 0x43, 0x02, 0xff, 0xff,
                0xff, 0xbf, 0x06,

            };

            for (int i=0; i<header.length; i++)
                out.write(header[i]);

            for (int i=0; i<4; i++, actionLength >>>= 8)
                out.write(actionLength);

            int[] body = {
                 0x82, 0x01, 0x00, 0x01, 0x00,
            };

            for (int i=0; i<body.length; i++)
                out.write(body[i]);

            out.write(data);

            out.write(0);
            out.write(0);

            // ShowFrame

            out.write(64);
            out.write(0);

            // End of Movie

            out.write(0);
            out.write(0);
        }
        catch (IOException e)
        {
            System.err.println("Could not write Flash file: ");
        }
    }
}
