/*
 * ASPArser.jj
 * Translate SWF
 *
 * A compiler for ActionScript
 * Copyright (c) 2003-2009 Flagstone Software Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.

 */
 
options {
    STATIC = false;
	JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(ASParser)

package com.flagstone.translate;

import java.io.*;

public final class ASParser extends Object
{
    /**
     * Constructs a new parser object. The current working directory "." is added 
     * to the list of directories that will be searched when looking for a file.
     */
    public ASParser() {
        this(System.in);
    }

    /**
     * Parses the ActionScript string, script. Any nested files specified
     * using #include directives are loaded before the complete script is 
     * parsed. The filenames and line numbers of #include'd scripts are 
     * tracked so any syntax errors are reported accurately.
     *
     * The character used used in the script is assumed to be UTF-8.
     *
     * @param script a String containing the ActionScript code to parse.
     *
     * @throws ParseException if a parsing error occurs.
     */
    public ASNode parse(String script) throws ParseException {
        byte[] bytes;
        
        try { 
            bytes = script.getBytes("UTF-8"); 
        } catch(Exception e) { 
            throw new ParseException();
        }
            
        ReInit(new ByteArrayInputStream(bytes));
        ASNode root = Script();
        root.validate();
        return root;
    }
    
    /**
     * reportError is used to report any errors found when validating a node 
     * during parsing. A ParseException is created containing the key which 
     * identifies the error and the Token which triggered it.
     *
     * @param errorKey a String that identifies the type of error that occurred.
     * @param token the token being parsed which triggered the error.
     *
     * @throws ParseException containing the errorKey and line number.
     */
    private void reportError(String errorKey, Token token) 
            throws ParseException {
        ParseException parseError = new ParseException(errorKey);
        parseError.currentToken = token;
        throw parseError;
    }
}

PARSER_END(ASParser)

SKIP : /* WHITE SPACE */
{
      " "
    | "\t"
    | "\f"
    | "\r"
    | "\n"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
      <BOOLEAN_LITERAL: "true" | "false" >
    | <NULL_LITERAL:    "null" >         

    | <INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> >
    |     <#DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*> 
    |       <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+> 

    | <FLOATING_POINT_LITERAL:
        (["+","-"])? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | (["0"-"9"])+ (<EXPONENT>)?
      >
    |     <#EXPONENT: ["e","E"] ((["+","-"])? (["0"-"9"])+)? >
       
    | <STRING_LITERAL: <DOUBLE_QUOTE> | <SINGLE_QUOTE> >
    |     <#DOUBLE_QUOTE: 
          "\"" 
          (   (~["\"","\\","\n","\r"])
            | ("\\"
                ( ["n","t","b","r","f","\\","\""]
                | ["0"-"7"] ( ["0"-"7"] )?
                | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                | "u" (["0"-"9","a"-"f","A"-"F"])+
                | "x" (["0"-"9","a"-"f","A"-"F"])+
                | "X" (["0"-"9","a"-"f","A"-"F"])+
                )
              )
          )*
          "\"">
    |     <#SINGLE_QUOTE: 
          "'" 
          (   (~["'","\\","\n","\r"])
            | ("\\"
                ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )?
                | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                | "u" (["0"-"9","a"-"f","A"-"F"])+
                | "x" (["0"-"9","a"-"f","A"-"F"])+
                | "X" (["0"-"9","a"-"f","A"-"F"])+
                )
              )
          )*
          "'">
}

TOKEN : /* Operators */
{ 
        < ASSIGN: "=" >
    |   < ASSIGN_ADD: "+=" >
    |   < ASSIGN_SUB: "-=" >
    |   < ASSIGN_MUL: "*=" >
    |   < ASSIGN_DIV: "/=" >
    |   < ASSIGN_MOD: "%=" >
    |   < ASSIGN_LSL: "<<=" >
    |   < ASSIGN_ASR: ">>=" >
    |   < ASSIGN_LSR: ">>>=" >
    |   < ASSIGN_AND: "&=" >
    |   < ASSIGN_OR: "|=" >
    |   < ASSIGN_XOR: "^=" >
    |   < LOGICAL_AND: "&&" >
    |   < LOGICAL_OR: "||" >
    |   < LOGICAL_NOT: "!" >
    |   < EQ: "==" >
    |   < GT: ">" >
    |   < LT: "<" >
    |   < GTE: ">=" >
    |   < LTE: "<=" >
    |   < NE: "!=" >
    |   < BIT_AND: "&" >
    |   < BIT_OR: "|" >
    |   < BIT_XOR: "^" >
    |   < BIT_NOT: "~" >
    |   < LSL: "<<" >
    |   < LSR: ">>>" >
    |   < ASR: ">>" >
    |   < PLUS: "+" >
    |   < MINUS: "-" >
    |   < MULTIPLY: "*" >
    |   < DIVIDE: "/" >
    |   < MOD: "%" >
    |   < INC: "++" >
    |   < DEC: "--" >
    |   < STRICT_EQ: "===" >
    |   < STRICT_NEQ: "!==" >
    |   < ADD: "add" >
    |   < AND: "and" >
    |   < OR: "or" >
    |   < STRING_EQ: "eq" >
    |   < STRING_NEQ: "ne" >
    |   < STRING_LE: "le" >
    |   < STRING_GT: "gt" >
    |   < STRING_GE: "ge" >
}

TOKEN : /* Commands */
{ 
      <IF: "if" >
    | <ELSE: "else" >
    | <WHILE: "while" >
    | <DO: "do" >
    | <FOR: "for" >
    | <IN: "in" >
    | <BREAK: "break" >
    | <CONTINUE: "continue" >
    | <DELETE: "delete" >
    | <INSTANCEOF: "instanceof" >
    | <RETURN: "return" >
    | <WITH: "with" >
    | <NEW: "new">
    | <FUNCTION: "function">
    | <VAR: "var">
    | <ONCLIPEVENT: "onClipEvent">
    | <ON: "on">
    | <TRY: "try">
    | <CATCH: "catch">
    | <FINALLY: "finally">
    | <THROW: "throw" >
    | <SWITCH: "switch">
    | <CASE: "case">
    | <DEFAULT_CASE: "default">
}

TOKEN : /* IDENTIFIERS */
{
      <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    |     < #LETTER: [ "a"-"z", "A"-"Z", "_"] >
    |     < #DIGIT: [ "0"-"9"] >
}

ASNode Literal() : { Token t; ASNode node = new ASNode(ASNode.Value);  }
{
    t=<BOOLEAN_LITERAL>
    {
        node.setType(ASNode.BooleanLiteral);
        if (t.image.toLowerCase().equals("true"))
            node.setBoolValue(true);
        else if (t.image.toLowerCase().equals("false"))
            node.setBoolValue(false);
        return node;
    }
    
    | t=<INTEGER_LITERAL>
    {
        Integer i;
        boolean negative = false;
        
        try {
            if (token.image.toLowerCase().startsWith("0x"))
            {
                i = Integer.valueOf(t.image.substring(2), 16); 
            }
            else
            {
                if (token.image.startsWith("+")) {
                    i = Integer.valueOf(token.image.substring(1));
                }
                else if (token.image.startsWith("-")) {
                    i = Integer.valueOf(token.image.substring(1));
                    negative = true;
                }
                else {
                    i = Integer.valueOf(token.image);
                }
            } 
        }
        catch (NumberFormatException e) {
            i = new Integer(0);
        }
        node.setType(ASNode.IntegerLiteral);
        node.setIntValue(negative ? -i.intValue() : i.intValue());
        return node;
    }
    
    | t=<FLOATING_POINT_LITERAL>
    {
        Double d;
        
        try {
            if (token.image.endsWith("e"))
            	d = Double.valueOf(token.image+"0");
            else
            	d = Double.valueOf(token.image);
        }
        catch (NumberFormatException e) {
            d = new Double(0);
        }
        node.setType(ASNode.DoubleLiteral);
        node.setDoubleValue(d.doubleValue());
        return node;
    }

    | t=<STRING_LITERAL>
    {
        node.setType(ASNode.StringLiteral);
        node.setStringValue(t.image.substring(1, t.image.length()-1));
        return node;
    }

    | t=<NULL_LITERAL>
    {
        node.setType(ASNode.NullLiteral);
        return node;
    }
}

ASNode Identifier() : { Token t; ASNode node = null; }
{
    /* Identifier() now looks ahead to see whether an identifier is followed 
     * by a Function() node. This allows 'named' functions to be diferentiated, 
     * e.g. stopAllSounds() from constructs such as 'this["echo"](args)'. This 
     * latter construct is why function calls are classed as suffix nodes since
     * any value returned in Flash can in theory be used to call a function.
     *
     * The Identifier() node short-circuits any PrimarySuffix() rule that might
     * follow by consuming the following tokens.
     */
      LOOKAHEAD(<IDENTIFIER> Function()) t=<IDENTIFIER> node=Function() 
      { 
          node.setStringValue(t.image);
          node.setNumber(t.beginLine);
          return node; 
      }
    | LOOKAHEAD(<IDENTIFIER>) t=<IDENTIFIER> 
      { 
          node = new ASNode(ASNode.Identifier, t.image); 
          return node; 
      }
}

/*
 * Statements
 */
 
ASNode Script() : { ASNode root = new ASNode(ASNode.Array), node = null; }
{
    ( node=Statement()
        { 
            if (node.getType() == ASNode.OnClipEvent)
                root.setType(ASNode.MovieClip);
            else if (node.getType() == ASNode.On)
                root.setType(ASNode.Button);
                
            root.setNumber(token.beginLine);
              root.add(node); 
        }
       )*
    { return root; }
}

ASNode Statement() : { ASNode node = null; }
{
    /*
     * Lookaheads are required on each different type of statements to allow
     * the following pairs of structures to be differentiated:
     * 
     * 1. BlockStatements and AnonymousObjects - both are enclosed by braces.
     * 2. FunctionDefinitions and MethodDefinitions - both start with the 'function'
     *
     * The ambiguities are a result of syntax choices in the design of the ActionScript
     * languages rather than shortcomings in the design of the parser.
     */
      LOOKAHEAD(BlockStatement()) node=BlockStatement() { return node; }
    | LOOKAHEAD(FunctionDefinition()) node=FunctionDefinition() { return node; }
    | LOOKAHEAD(ExpressionStatement()) node=ExpressionStatement() { return node; }
    | LOOKAHEAD(IfStatement()) node=IfStatement() { return node; }
    | LOOKAHEAD(WithStatement()) node=WithStatement() { return node; }
    | LOOKAHEAD(WhileStatement()) node=WhileStatement() { return node; }
    | LOOKAHEAD(DoStatement()) node=DoStatement() { return node; }
    | LOOKAHEAD(ForStatement()) node=ForStatement() { return node; }
    | LOOKAHEAD(BreakStatement()) node=BreakStatement() { return node; }
    | LOOKAHEAD(ContinueStatement()) node=ContinueStatement() { return node; }
    | LOOKAHEAD(ReturnStatement()) node=ReturnStatement() { return node; }
    | LOOKAHEAD(OnClipEvent()) node=OnClipEvent() { return node; }
    | LOOKAHEAD(On()) node=On() { return node; }
    | LOOKAHEAD(TryStatement()) node=TryStatement() { return node; }
    | LOOKAHEAD(ThrowStatement()) node=ThrowStatement() { return node; }
    | LOOKAHEAD(SwitchStatement()) node=SwitchStatement() { return node; }
}


ASNode FunctionDefinition() : { Token t; ASNode node = new ASNode(ASNode.DefineFunction), name = null, args = null, body = null; }
{
    [<FUNCTION>] t=<IDENTIFIER> { node.setStringValue(t.image); } "(" [ args=ArgumentList() { node.add(args); } ] ")" body=BlockStatement() { node.add(body); }

    { return node; }
}

ASNode BlockStatement() : { ASNode list = new ASNode(ASNode.StatementList), node = null; }
{
    "{" ( node=Statement() { list.add(node); } )* "}"
    { return list; }
}

ASNode ExpressionStatement() : { Token t; ASNode node = new ASNode(ASNode.NoOp); }
{
    [ node=ExpressionList() ] ";" { return node; }
}

ASNode IfStatement() : { Token t; ASNode ifnode = new ASNode(ASNode.If), node = null;  ifnode.add(new ASNode(ASNode.NoOp)); }
{
    t=<IF> "(" node=ConditionalExpression() ")" { ifnode.set(0, node); } 
        node=Statement() { ifnode.add(node); } 
        [ LOOKAHEAD(2) <ELSE> node=Statement() { ifnode.add(node); } ]

    { return ifnode; } 
}

ASNode WithStatement() : { ASNode withNode = new ASNode(ASNode.With), node = null; }
{
    <WITH> "(" node=ConditionalExpression() ")" { withNode.add(node); } 
        node=Statement() { withNode.add(node); }
        
    { return withNode; }
}

ASNode WhileStatement() : { ASNode whileNode = new ASNode(ASNode.While), node = null; whileNode.add(new ASNode(ASNode.NoOp)); }
{
    <WHILE> "(" node=ConditionalExpression() ")" { whileNode.set(0, node); }
        node=Statement() { whileNode.add(node); }
        
    { return whileNode; }
}    

ASNode DoStatement() : { ASNode doNode = new ASNode(ASNode.Do), node = null; doNode.add(new ASNode(ASNode.NoOp)); }
{
    <DO> node=Statement() { doNode.set(0, node); }
    <WHILE> "(" node=ConditionalExpression() ")" ";" { doNode.add(node); }
    
    { return doNode; }
}    

ASNode ForStatement() : { Token t; ASNode forNode = null, node = null; }
{
    LOOKAHEAD (5) // Lookahead for the <IN> token that separates for() from for..in
    
      <FOR> 
          { 
              forNode = new ASNode(ASNode.For); 
              forNode.add(new ASNode(ASNode.NoOp)); 
              forNode.add(new ASNode(ASNode.NoOp)); 
              forNode.add(new ASNode(ASNode.NoOp)); 
              forNode.add(new ASNode(ASNode.NoOp)); 
          } "(" 
          [ node=ExpressionList() { forNode.set(0, node); } ] ";" 
          [ node=ConditionalExpression() { forNode.set(1, node); } ] ";" 
          [ node=ExpressionList() { forNode.set(2, node); } ] ")" 
          node=Statement() { forNode.set(3, node); return forNode; }
          
    | <FOR> { forNode = new ASNode(ASNode.ForIn); } "(" 
          ["var"] t=<IDENTIFIER> { forNode.add(new ASNode(ASNode.Identifier, t.image)); }
          <IN> node=ConditionalExpression() ")"  { forNode.add(node); }
          node=Statement() { forNode.add(node); return forNode; }
}

ASNode BreakStatement() : { Token t; ASNode node = new ASNode(ASNode.Break); }
{
    t=<BREAK> ";"
    { 
        node.setNumber(t.beginLine);
        return node; 
    }
}

ASNode ContinueStatement() : { Token t; ASNode node = new ASNode(ASNode. Continue); }
{
    t=<CONTINUE> ";"
    { 
        node.setNumber(t.beginLine);
        return node; 
    }
}

ASNode ReturnStatement() : { Token t; ASNode returnNode = new ASNode(ASNode.Return), node = null; }
{
    t=<RETURN> [ node=ConditionalExpression() { returnNode.add(node); } ] ";"
    { 
        returnNode.setNumber(t.beginLine);
        return returnNode; 
    }
}

ASNode OnClipEvent() : { Token t; ASNode eventNode = new ASNode(ASNode.OnClipEvent), node = null; }
{
    t=<ONCLIPEVENT> "(" node=Identifier() 
    {
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.clipEvents.containsKey(node.getStringValue()))
            {
                int eventCode = ((Integer)ASNode.clipEvents.get(node.getStringValue())).intValue();
                
                eventNode.setIntValue(eventCode); 
            }
            else
            {
                reportError("UnknownMovieClipEvent", t);
            }
        }
        else
        {
            reportError("UnknownMovieClipEvent", t);
        }
       } 
    ( "," node=Identifier() 
    {
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.clipEvents.containsKey(node.getStringValue()))
            {
                int allEvents = eventNode.getIntValue();
                int event = ((Integer)ASNode.clipEvents.get(node.getStringValue())).intValue();
                
                eventNode.setIntValue(allEvents + event); 
            }
            else
            {
                reportError("UnknownMovieClipEvent", t);
            }
        }
        else
        {
            reportError("UnknownMovieClipEvent", t);
        }
    } 
    )* ")" node=Statement() { eventNode.add(node); }
        
    { return eventNode; }
}

ASNode On() : { Token t; ASNode eventNode = new ASNode(ASNode.On), node = null; }
{
    t=<ON> "(" ( LOOKAHEAD(2) node=Identifier() node=Literal() | node=Identifier() )
    {
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.buttonEvents.containsKey(node.getStringValue()))
            {
                int event = ((Integer)ASNode.buttonEvents.get(node.getStringValue())).intValue();
                eventNode.setIntValue(event); 
            }
            else
            {
                reportError("UnknownButtonEvent", t);
            }
        }
        else if (node.getType() == ASNode.StringLiteral)
        {
            String key = node.getStringValue();
            int event = 0;
            
            if (ASNode.buttonEvents.containsKey(key))
            {
                event = ((Integer)ASNode.buttonEvents.get(key)).intValue();
            }
            else
            {
                event = key.charAt(0) << 9;
            }
            eventNode.setIntValue(event); 
        }
        else
        {
            reportError("UnknownButtonEvent", t);
        }
       } 
    ( ","  ( LOOKAHEAD(2) node=Identifier() node=Literal() | node=Identifier() )
    {
        if (node.getType() == ASNode.Identifier)
        {
            if (ASNode.buttonEvents.containsKey(node.getStringValue()))
            {
                int allEvents = eventNode.getIntValue();
                int event = ((Integer)ASNode.buttonEvents.get(node.getStringValue())).intValue();
                
                eventNode.setIntValue(allEvents + event); 
            }
            else
            {
                reportError("UnknownButtonEvent", t);
            }
        }
        else if (node.getType() == ASNode.StringLiteral)
        {
            String key = node.getStringValue();
            int allEvents = eventNode.getIntValue();
            int event = 0;
            
            if (ASNode.buttonEvents.containsKey(key))
            {
                event = ((Integer)ASNode.buttonEvents.get(key)).intValue();
            }
            else
            {
                event = key.charAt(0) << 9;
            }
            eventNode.setIntValue(allEvents + event); 
        }
        else
        {
            reportError("UnknownButtonEvent", t);
        }
    } 
    )* 
    ")" node=Statement() { eventNode.add(node); }
        
    { return eventNode; }
}

ASNode TryStatement() : { ASNode exceptionNode = new ASNode(ASNode.Exception), node = null, catchNode = null;}
{   
    <TRY>
        node=Statement() { ASNode tryNode = new ASNode(ASNode.Try); tryNode.add(node); exceptionNode.add(tryNode); }
    
    ( LOOKAHEAD(2) <CATCH> "(" node=ConditionalExpression() ")" { catchNode = new ASNode(ASNode.Catch); exceptionNode.add(catchNode);}
        node=Statement() { catchNode.add(node); } )*
    [ LOOKAHEAD(2) <FINALLY>
        node=Statement() { ASNode finallyNode = new ASNode(ASNode.Finally); finallyNode.add(node); exceptionNode.add(finallyNode); } ]
        
    { return exceptionNode; }
}    

ASNode ThrowStatement() : { Token t; ASNode throwNode = new ASNode(ASNode.Throw), node = null; }
{
    <THROW> node=ConditionalExpression() { throwNode.add(node); } ";"

    { return throwNode; }
}

ASNode SwitchStatement() : { ASNode switchNode = new ASNode(ASNode.Switch), label = null, list = null, node = null; }
{
    <SWITCH> "(" node=ConditionalExpression() ")" { switchNode.add(node); } "{"
        (label=SwitchLabel() { switchNode.add(label); list = new ASNode (ASNode.List); } (node=Statement() {list.add(node); } )* { if (list.count() > 0) switchNode.add(list); } )*
    "}"
    
    { return switchNode; }
}    

ASNode SwitchLabel() : { ASNode labelNode = new ASNode(ASNode.Label), node = null; }
{
    ( <CASE> node=Expression() ":" { labelNode.add(node); }
    | <DEFAULT_CASE> ":"
    )
    { return labelNode; }
}

/*
 * Define lists
 */

ASNode ExpressionList() : { ASNode block = new ASNode(ASNode.List), node = null; }
{
    node=Expression() { block.add(node); } ( "," node=Expression() { block.add(node); } )*
    { 
        if (block.count() == 1)
            return block.get(0);
        else
            return block; 
    }
}

ASNode ArgumentList() : { ASNode block = new ASNode(ASNode.List), node = null; }
{
    node=ConditionalExpression() { block.add(node); } ( "," node=ConditionalExpression() { block.add(node); } )*
    { 
        if (block.count() == 1)
            return block.get(0);
        else
            return block; 
    }
}

/*
 * Expression Syntax
 */
 
ASNode Expression() : { ASNode node = null; }
{
      node=AssignmentExpression() { return node; }
 //   | LOOKAHEAD(ConditionalExpression()) node=ConditionalExpression() { return node; }
}

ASNode AssignmentExpression() : { boolean isVar = false; int type = 0; ASNode node = null, left = null, right = null; }
{
    ( "var" { isVar = true; } ) ? node=ConditionalExpression()  { if (isVar) node.setType(ASNode.DefineVariable); }
    [
        ( <ASSIGN> { type = ASNode.Assign; }
        | <ASSIGN_ADD> { type = ASNode.AssignAdd; }
        | <ASSIGN_SUB> { type = ASNode.AssignSub; }
        | <ASSIGN_MUL> { type = ASNode.AssignMul; }
        | <ASSIGN_DIV> { type = ASNode.AssignDiv; }
        | <ASSIGN_MOD> { type = ASNode.AssignMod; }
        | <ASSIGN_LSL> { type = ASNode.AssignLSL; }
        | <ASSIGN_ASR> { type = ASNode.AssignASR; }
        | <ASSIGN_LSR> { type = ASNode.AssignLSR; }
        | <ASSIGN_AND> { type = ASNode.AssignBitAnd; }
        | <ASSIGN_OR> { type = ASNode.AssignBitOr; }
        | <ASSIGN_XOR> { type = ASNode.AssignBitXOr; }
        )  
        
        right=AssignmentExpression() 
    
        { 
            node = new ASNode(type, node, right);
        }
    
    ]
    
    { return node; }
}

/*
 * The following nodes describe a binary tree which are used to parse expressions containing 
 * the different types of operators. The left branch of the tree descends down one level.
 * The right branch parses the remaining part of the expression starting at the same level. 
 * This allows statements such as a + b * c to be correctly parsed as a + (b * c) which takes
 * into account the level of precendence assigned to different operations. If the right brach 
 * also descended down the tree then the expression would be parsed as (a + b) * c.
 */
 
ASNode ConditionalExpression() : { ASNode node = null, cond = null, a = null, b = null; }
{
    node=LogicalOrExpression() (  
        "?" a=Expression() ":" b=ConditionalExpression() 
        { cond = node; 
          node = new ASNode(ASNode.Select); 
          node.add(cond);
          node.add(a);
          node.add(b);
        }
    )?
    { return node; }
}

ASNode LogicalOrExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=LogicalAndExpression()  (
        ( <LOGICAL_OR> { type = ASNode.LogicalOr; }
        | <OR> { type = ASNode.Or; }
        )
        right=LogicalAndExpression()
        
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode LogicalAndExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=InclusiveOrExpression()  ( 
        ( <LOGICAL_AND> { type = ASNode.LogicalAnd; } 
        | <AND> { type = ASNode.And; } 
        )
        right=InclusiveOrExpression()
        
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode InclusiveOrExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=ExclusiveOrExpression() ( 
        <BIT_OR> { type = ASNode.BitOr; }
        right=ExclusiveOrExpression()
        
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode ExclusiveOrExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=AndExpression() ( 
        <BIT_XOR> { type = ASNode.BitXOr; }
        right=AndExpression()
        
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode AndExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=EqualityExpression() ( 
        <BIT_AND> { type = ASNode.BitAnd; }
        right=EqualityExpression()
        
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode EqualityExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=RelationalExpression() ( 
        ( <EQ> { type = ASNode.Equal; }
        | <NE> { type = ASNode.NotEqual; }
        | <STRICT_EQ> { type = ASNode.StrictEqual; }
        | <STRICT_NEQ> { type = ASNode.StrictNotEqual; }
        | <STRING_EQ> { type = ASNode.StringEqual; }
        | <STRING_NEQ> { type = ASNode.StringNotEqual; }
        ) 
        right=RelationalExpression()
 
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode RelationalExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=InstanceExpression() ( 
        ( <LT> { type = ASNode.LessThan; }
        | <GT> { type = ASNode.GreaterThan; }
        | <LTE> { type = ASNode.LessThanEqual; }
        | <GTE> { type = ASNode.GreaterThanEqual; }
        | <STRING_GT> { type = ASNode.StringGreaterThan; }
        | <STRING_LE> { type = ASNode.StringLessThanEqual; }
        | <STRING_GE> { type = ASNode.StringGreaterThanEqual; }
        ) 
        right=InstanceExpression()
 
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode InstanceExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=ShiftExpression() ( 
        ( <INSTANCEOF> { type = ASNode.InstanceOf; }
        ) right=ShiftExpression()
        
       { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode ShiftExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=AdditiveExpression() ( 
        ( <LSL> { type = ASNode.LSL; }
        | <LSR> { type = ASNode.LSR; }
        | <ASR> { type = ASNode.ASR; }
        ) right=AdditiveExpression()
        
        { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode AdditiveExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=MultiplicativeExpression() ( 
        ( <PLUS> { type = ASNode.Add; }
        | <MINUS> { type = ASNode.Sub; }
        | <ADD> { type = ASNode.StringAdd; }
        ) right=MultiplicativeExpression()
        
       { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode MultiplicativeExpression() : { int type = 0; ASNode left = null, right = null; }
{
    left=UnaryExpression() ( 
        ( <MULTIPLY> { type = ASNode.Mul; }
        | <DIVIDE> { type = ASNode.Div; }
        | <MOD> { type = ASNode.Mod; }
        ) right=UnaryExpression()
        
       { left = new ASNode(type, left, right); }
    )*
    { return left; }
}

ASNode UnaryExpression() : { int type = 0; ASNode node = null; }
{
      ( <PLUS> { type = ASNode.Plus; } | <MINUS> { type = ASNode.Minus; } ) node=UnaryExpression() 
      { return new ASNode(type, node); }
    | ( <INC> { type = ASNode.PreInc; } | <DEC> { type = ASNode.PreDec; } ) node=PrimaryExpression()  
      { return new ASNode(type, node); }
    | ( <BIT_NOT> { type = ASNode.BitNot; } | <LOGICAL_NOT> { type = ASNode.Not; } ) node=UnaryExpression() 
      { return new ASNode(type, node); }
    | <DELETE> { type = ASNode.Delete; } node=UnaryExpression()  
      { return new ASNode(type, node); }
    | node=PostfixExpression() { return node; }
}

ASNode PostfixExpression() : { int type = 0; ASNode node = null; }
{
    node=PrimaryExpression() (
        ( <INC> { type = ASNode.PostInc; } 
        | <DEC> { type = ASNode.PostDec; } 
        ) { node = new ASNode(type, node); }
    )*
    { return node; }
}

/*
 * Primary expressions are split into a prefix/suffix pair. This allows some of the more 
 * esoteric features of ActionScript to be handled cleanly, specifically variables and 
 * array elments can contain objects and even functions. The statement a[1](arg) is 
 * valid ActionScript - the first element of the array contains a function which is 
 * executed passing the argument, arg.
 *
 * Suffixing also allows object path names, e.g. a.b.c() to be correctly parsed.
 *
 * IMPORTANT: The Identifier() node looks ahead to see whether the indentifier is 
 * actually the name of a function. The node looksahead to see if the identifier 
 * token is followed by a Function() node. If so the tokens are consumed.
 */
ASNode PrimaryExpression() : { ASNode list = new ASNode(ASNode.Value), node = null; }
{
    node=PrimaryPrefix() { list.add(node); } ( node=PrimarySuffix() { list.add(node); } )*
    { 
        if (list.count() == 1)
            return list.get(0);
        else
            return list; 
    }
}

ASNode PrimaryPrefix() : { ASNode node = null; }
{
    LOOKAHEAD(6)
    
      node=AnonymousArray() { return node; }
    | node=AnonymousObject() { return node; }
    | node=MethodDefinition() { return node; }
    | node=Constructor() { return node; }
    | node=Literal() { return node; }
    | node=Identifier() { return node; }
    | "(" node=ConditionalExpression() ")" { return node; }
}

ASNode PrimarySuffix() : { Token t; ASNode node = null, name = null; }
{
    /*
     * Lookahead using the <IDENTIFIER> token when separating fetching an 
     * attribute from calling a method on an object rather than using the
     * Identifier() node. Look at Identifier() for an explanation why this
     * is the case.
     */
      "[" node=ConditionalExpression() "]" 
      { return new ASNode(ASNode.Subscript, node); }
    | LOOKAHEAD ("." <IDENTIFIER> "(" ) "." t=<IDENTIFIER> node=Function() 
      { node.setType(ASNode.Method); node.setStringValue(t.image); return node; }
    | LOOKAHEAD ("." <IDENTIFIER>) "." t=<IDENTIFIER> 
      { node = new ASNode(ASNode.Attribute); node.setStringValue(t.image); return node; }
    | node=Function() 
      { return node; }
}

ASNode Function() : { ASNode node = new ASNode(ASNode.Function, ""), arg = null; }
{
    "(" [ arg=ConditionalExpression() { node.add(arg); } ( "," arg=ConditionalExpression() { node.add(arg); } )* ] ")"
    
    { return node; }
}

ASNode Constructor() : { Token t; ASNode node = new ASNode(ASNode.NewObject), arg = null; }
{
    <NEW> 
    ( LOOKAHEAD(t=<IDENTIFIER> "(") t=<IDENTIFIER> "(" [ arg=ConditionalExpression() { node.add(arg); } ( "," arg=ConditionalExpression() { node.add(arg); } )* ] ")" 
    | LOOKAHEAD(t=<IDENTIFIER>) t=<IDENTIFIER>
    )
    { node.setStringValue(t.image); return node; }
}

ASNode AnonymousArray() : { ASNode node = new ASNode(ASNode.DefineArray), element = null; }
{
    "[" [ element=ConditionalExpression() { node.add(element); } 
        ( "," element=ConditionalExpression() { node.add(element); } )*
        ] 
    "]"
    
    { return node; }
}

ASNode MethodDefinition() : { ASNode node = new ASNode(ASNode.DefineMethod), args = null, body = null; }
{
    <FUNCTION> "(" [ args=ArgumentList() { node.add(args); } ] ")" body=BlockStatement() { node.add(body); }

    { return node; }
}

ASNode AnonymousObject() : { ASNode node = new ASNode(ASNode.DefineObject), attribute = null; }
{
    "{" [ attribute=Attribute() { node.add(attribute); } ( "," attribute=Attribute() { node.add(attribute); } )* ] "}"
    
    { return node; }
}

ASNode Attribute() : { ASNode key = null, value = null; }
{
    key=Identifier() ":" value=ConditionalExpression()
    
    { return new ASNode(ASNode.DefineAttribute, key, value); }
}
