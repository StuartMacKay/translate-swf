- test: Array constructor with elements
  refid: array_constructor_elements
  file: classes/array/constructor_elements.as
  script: |
    a = new Array(1,2,3);
- test: Array constructor with size
  refid: array_constructor_size
  file: classes/array/constructor_size.as
  script: |
    a = new Array(3);
- test: Array constructor with brackets
  refid: array_constructor_brackets
  file: classes/array/constructor_brackets.as
  script: |
    a = [1, 2, 3];
- test: Array constructor with empty brackets
  refid: array_constructor_empty
  file: classes/array/constructor_empty.as
  script: |
    a = [];
- test: concat()
  refid: array_accessor
  file: classes/array/concat.as
  script: |
    a = [1, 2, 3];
    b = a.concat(4, 5, 6);
- test: join()
  refid: array_join_default
  file: classes/array/join.as
  script: |
    a = [1, 2, 3];
    b = a.join("-");
- test: pop()
  refid: array_pop
  file: classes/array/pop.as
  script: |
    a = [1, 2, 3];
    b = a.pop();
- test: push()
  refid: array_push
  file: classes/array/push.as
  script: |
    a = [1, 2, 3];
    b = a.push(4, 5, 6);
- test: reverse()
  refid: array_reverse
  file: classes/array/reverse.as
  script: |
    a = [1, 2, 3];
    b = a.reverse();
- test: shift()
  refid: array_shift
  file: classes/array/shift.as
  script: |
    a = [1, 2, 3];
    b = a.shift();
- test: slice()
  refid: array_slice
  file: classes/array/slice.as
  script: |
    a = [1, 2, 3];
    b = a.slice(2, 1);
- test: splice()
  refid: array_splice
  file: classes/array/splice.as
  script: |
    a = [1, 2, 3];
    b = a.splice(1, 2, 1.2, 1.3);
- test: toString()
  refid: array_tostring
  file: classes/array/tostring.as
  script: |
    a = [1, 2, 3];
    b = a.toString();
- test: unshift()
  refid: array_unshift
  file: classes/array/unshift.as
  script: |
    a = [1, 2, 3];
    b = a.unshift(4);
- test: length
  refid: array_length
  file: classes/array/length.as
  script: |
    a = [1, 2, 3];
    b = a.length;
- test: sort()
  refid: array_sort
  file: classes/array/sort.as
  script: |
    a = [3, 1, 2];
    a.sort();
- test: sort() with function
  refid: array_sort_function
  file: classes/array/sort_function.as
  script: |
    function descending(a, b) {
        if (a < b)
            return 1;
        else if (a > b)
            return -1;
        else
            return 0;
    }   
    a = [3, 1, 2];
    a.sort(descending);
- test: sort() option
  refid: array_sort_option
  file: classes/array/sort_option.as
  script: |
    a = new Array(1, 2, 3);
    a.sort(Array.DESCENDING);
- test: sorton() 
  refid: array_sorton
  file: classes/array/sorton.as
  script: |
    function descending(a, b) {
        if (a < b)
            return 1;
        else if (a > b)
            return -1;
        else
            return 0;
    }  
    a = new Array();
    a.push({name: "Bob", age: 25});
    a.push({name: "Alice", age: 24});
    a.push({name: "Jane", age: 34});
    a.sortOn("name");
- test: sorton() option
  refid: array_sorton_option
  file: classes/array/sorton_option.as
  script: |
    a = new Array();
    a.push({name: "Bob", age: 25});
    a.push({name: "Alice", age: 24});
    a.push({name: "Jane", age: 34});
    a.sortOn("name", Array.DESCENDING);
- test: CASEINSENSITIVE option
  refid: array_caseinsensitive
  file: classes/array/caseinsensitive.as
  script: |
    opt = Array.CASEINSENSITIVE;
- test: DESCENDING option
  refid: array_descending
  file: classes/array/descending.as
  script: |
    opt = Array.DESCENDING;
- test: UNIQUE option
  refid: array_unique
  file: classes/array/unique.as
  script: |
    opt = Array.UNIQUE;
- test: NUMERIC option
  refid: array_numeric
  file: classes/array/numeric.as
  script: |
    opt = Array.NUMERIC;
